@import java.util.Map
@import com.jsoniter.any.Any
@args (String handlerPackage, Map<String, Any> map)
package @handlerPackage;

import com.networknt.client.Client;
import com.networknt.server.Server;
import com.networknt.exception.ClientException;
import com.networknt.exception.ApiException;
import org.apache.commons.io.IOUtils;
import org.apache.http.HttpResponse;
import org.apache.http.client.ClientProtocolException;
import org.apache.http.client.ResponseHandler;
import org.apache.http.client.methods.*;
import org.apache.http.impl.client.CloseableHttpClient;
import org.junit.*;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.io.IOException;

@with (className = map.get("handlerName") + "Test",
       method = map.get("handlerName") + "Test()",
       loggerName = map.get("handlerName") + "Test" + ".class",
       capMethod = map.get("capMethod"),
       path = map.get("normalizedPath")) {
public class @className {
    @@ClassRule
    public static TestServer server = TestServer.getInstance();

    static final Logger logger = LoggerFactory.getLogger(@loggerName);

    @@Test
    public void test@method throws ClientException, ApiException {
        CloseableHttpClient client = Client.getInstance().getSyncClient();
        Http@capMethod http@capMethod = new Http@capMethod ("http://localhost:8080@path");
        /*
        Client.getInstance().addAuthorization(http@capMethod);
        try {
            CloseableHttpResponse response = client.execute(http@capMethod);
            Assert.assertEquals(200, response.getStatusLine().getStatusCode());
            Assert.assertEquals("", IOUtils.toString(response.getEntity().getContent(), "utf8"));
        } catch (Exception e) {
            e.printStackTrace();
        }
        */
    }
}
}